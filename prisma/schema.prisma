generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Organization {
  id            String         @id @default(cuid())
  name          String
  slug          String         @unique
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  services      Service[]
  incidents     Incident[]
  members       Member[]
  subscriptions Subscription[]
}

model Member {
  id             String       @id @default(cuid())
  organizationId String
  userId         String
  role           String       @default("MEMBER")
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organization   Organization @relation(fields: [organizationId], references: [id])

  @@unique([organizationId, userId])
}

model Service {
  id             String          @id @default(cuid())
  name           String
  description    String?
  status         String          @default("OPERATIONAL")
  organizationId String
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  incidents      Incident[]
  metrics        ServiceMetric[]
  organization   Organization    @relation(fields: [organizationId], references: [id])

  @@index([status])
}

model Incident {
  id             String       @id @default(cuid())
  title          String
  description    String
  status         String       @default("INVESTIGATING")
  severity       String       @default("LOW")
  serviceId      String
  organizationId String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organization   Organization @relation(fields: [organizationId], references: [id])
  service        Service      @relation(fields: [serviceId], references: [id])
  updates        Update[]

  @@index([serviceId])
  @@index([status])
  @@index([severity])
}

model Update {
  id         String   @id @default(cuid())
  content    String
  status     String   @default("INVESTIGATING")
  incidentId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  incident   Incident @relation(fields: [incidentId], references: [id])
}

model Subscription {
  id             String       @id @default(cuid())
  email          String
  organizationId String
  token          String       @unique // For unsubscribe verification
  confirmed      Boolean      @default(false)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([email, organizationId])
  @@index([email])
  @@index([token])
}

model ServiceMetric {
  id             String       @id @default(cuid())
  serviceId      String
  status         String
  timestamp      DateTime     @default(now())
  service        Service      @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@index([serviceId])
  @@index([timestamp])
}

enum ServiceStatus {
  OPERATIONAL
  DEGRADED
  OUTAGE
}

enum IncidentStatus {
  INVESTIGATING
  IDENTIFIED
  MONITORING
  RESOLVED
}

enum Severity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}
